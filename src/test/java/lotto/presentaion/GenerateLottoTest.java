package lotto.presentaion;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.Mockito.mockStatic;
import static org.mockito.Mockito.when;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;
import java.util.NoSuchElementException;

import org.assertj.core.util.Strings;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvFileSource;
import org.junit.jupiter.params.provider.CsvSource;
import org.junit.jupiter.params.provider.ValueSource;
import org.mockito.MockedStatic;

import lotto.domain.lotto.Lotto;
import lotto.domain.lotto.LottoGenerator;
import lotto.domain.lotto.Lottos;
import lotto.infrastructure.datashared.UiSharedData;
import lotto.infrastructure.util.Console;
import lotto.presentation.GenerateLotto;
import lotto.presentation.Screen;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class GenerateLottoTest {
  private static final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
  private static final PrintStream originalOut = System.out;
  private static final InputStream originalIn = System.in;

  private static MockedStatic<UiSharedData> uiSharedData;
  private static MockedStatic<LottoGenerator> lottoGenerator;

  @BeforeAll
  public static void beforeClass() {
    uiSharedData = mockStatic(UiSharedData.class);
    lottoGenerator = mockStatic(LottoGenerator.class);
  }

  @AfterAll
  public static void afterClass() {
    uiSharedData.close();
    lottoGenerator.close();
  }

  @BeforeEach
  public void setUpStreams() {
    System.setOut(new PrintStream(outContent));
  }

  @AfterEach
  public void restoreStreams() {
    System.setOut(originalOut);
    System.setIn(originalIn);
    System.out.println(outContent.toString().trim());
  }

  @DisplayName("다른 화면으로부터 금액을 전달 받고 수동으로 할 로또 횟수 및 번호를 입력 받으면 수동, 자동 장수 및 자동 로또번호가 출력된다.")
  @Test
  void print_generateLotto() {
    // given
    Integer lottosPrice =  4000;
    Integer buyLottoCount = 1;

    String[] lottoNumber1 = new String[] {"8", "21", "23", "41", "42", "43"};

    System.setIn(new ByteArrayInputStream(Strings.join(String.valueOf(buyLottoCount),
                                                        String.join(",", lottoNumber1)
                                          ).with("\n").getBytes()));
    Console.reLoadScanner();
    when(UiSharedData.getLottosPrice()).thenReturn(lottosPrice);

    Lottos autoGeneratedLottos = Lottos.valueOf(Lotto.valueOf("10", "3", "2", "40", "14", "41"),
                                                Lotto.valueOf("13", "24", "30", "29", "39", "25"),
                                                Lotto.valueOf("33", "17", "32", "1", "6", "18"));

    when(LottoGenerator.autoGenerate(anyInt())).thenReturn(autoGeneratedLottos);

    Screen autoGenerate = new GenerateLotto();

    // when
    autoGenerate.render();

    // then
    List<String> exptedString = new ArrayList<String>();

    exptedString.add("수동으로 구매할 로또 수를 입력해 주세요.");
    exptedString.add("수동으로 구매할 번호를 입력해 주세요.");
    exptedString.add("수동으로 1장, 자동으로 3개를 구매했습니다.");
    exptedString.add("[10, 3, 2, 40, 14, 41]");
    exptedString.add("[13, 24, 30, 29, 39, 25]");
    exptedString.add("[33, 17, 32, 1, 6, 18]");

    assertThat(outContent.toString().trim()).contains(exptedString);
  }

  @DisplayName("로또 개수 입력 오류를 검사한다.")
  @ValueSource(strings = {"-1", "1,2", "a", "@"})
  @ParameterizedTest
  void invalidCheck_inputLottoCount(String inputBuyLottoCount) {
    // given
    System.setIn(new ByteArrayInputStream(Strings.join(inputBuyLottoCount)
                                                  .with("\n")
                                                  .getBytes()));
    Console.reLoadScanner();

    Screen autoGenerate = new GenerateLotto();

    // when
    Assertions.assertThrows(NoSuchElementException.class,
      () -> {autoGenerate.render();}
    );

    // then
    List<String> exptedString = new ArrayList<String>();

    exptedString.add("수동으로 구매할 로또 수를 입력해 주세요.");
    exptedString.add("입력한 구매수가 유효하지 않습니다.");

    assertThat(outContent.toString().trim()).contains(exptedString);
  }

  @DisplayName("로또 번호 입력 오류를 검사한다.")
  @ValueSource(strings = {"'1,2,3,4,5', 'a,2,3,4,5,6'"})
  @ParameterizedTest
  void invalidCheck_inputLottoNumbers(String inputLottoNumbers) {
    // given
    String inputBuyLottoCount = "1";

    System.setIn(new ByteArrayInputStream(Strings.join(inputBuyLottoCount, inputLottoNumbers)
                                                  .with("\n")
                                                  .getBytes()));
    Console.reLoadScanner();

    Screen autoGenerate = new GenerateLotto();

    // when
    Assertions.assertThrows(NoSuchElementException.class,
      () -> {autoGenerate.render();}
    );

    // then
    assertThat(outContent.toString().trim()).contains("입력한 로또번호가 유효하지 않습니다.");
  }
}
