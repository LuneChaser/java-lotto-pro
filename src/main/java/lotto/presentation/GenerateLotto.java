package lotto.presentation;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import lotto.domain.lotto.Lotto;
import lotto.domain.lotto.LottoGenerator;
import lotto.domain.lotto.Lottos;
import lotto.infrastructure.component.Label;
import lotto.infrastructure.component.MarginLabel;
import lotto.infrastructure.component.TextEdit;
import lotto.infrastructure.datashared.UiSharedData;

public class GenerateLotto extends Screen {
  private final TextEdit manualGenerateCount;
  private final Label manualGenerateLottoTitle;
  private final TextEdit manualGenerateLotto;
  private final MarginLabel marginLabel;
  private final Label resultBuyType;
  private final Label autoGeneratedLottoNumbers;
  private final Label invalidAlertForInvalidInputLottoCount;
  private final Label invalidAlertForInvalidInputLottoNumber;
  private Integer buylottoCount;

  public GenerateLotto() {
    manualGenerateCount = new TextEdit();
    manualGenerateLottoTitle = new Label();
    manualGenerateLotto = new TextEdit();
    marginLabel = new MarginLabel();
    resultBuyType = new Label();
    invalidAlertForInvalidInputLottoCount = new Label();
    invalidAlertForInvalidInputLottoNumber = new Label();
    autoGeneratedLottoNumbers = new Label();

    initialize();
  }

  @Override
  public void initialize() {
    setTopMargin(1);

    manualGenerateLotto.setTopMargin(false);

    manualGenerateCount.setPrintText("수동으로 구매할 로또 수를 입력해 주세요.");
    manualGenerateLottoTitle.setPrintText("수동으로 구매할 번호를 입력해 주세요.");
    invalidAlertForInvalidInputLottoCount.setPrintText("입력한 구매수가 유효하지 않습니다.");
    invalidAlertForInvalidInputLottoNumber.setPrintText("입력한 로또번호가 유효하지 않습니다.");
    marginLabel.setMarginCount(1);
  }

  @Override
  public void render() {
    super.render();

    Integer manualLottoCount = renderManulLottoCount();

    Lottos manualGeneratedLottos = createManualGeneratedLottos(manualLottoCount);

    Integer autoLottoCount = buylottoCount - manualLottoCount;
    renderResultLottoCount(manualLottoCount, autoLottoCount);

    Lottos autoGeneratedLottos = renderAutoGenerateLotto(autoLottoCount);

    Lottos generatedLotto = generatedLotto(manualGeneratedLottos, autoGeneratedLottos);

    UiSharedData.setBuyLottos(generatedLotto);
  }

  private Lottos generatedLotto(Lottos manualGeneratedLottos, Lottos autoGeneratedLottos) {
    Lottos returnLottos = Lottos.valueOf();

    returnLottos.add(manualGeneratedLottos);
    returnLottos.add(autoGeneratedLottos);

    return returnLottos;
  }

  private Lottos createManualGeneratedLottos(Integer manualLottoCount) {
    marginLabel.render();
    manualGenerateLottoTitle.render();

    Lottos manualGeneratedLottos = Lottos.valueOf();

    while (!Objects.equals(manualGeneratedLottos.size(), manualLottoCount)) {
      insertManualLottoNumbers(manualGeneratedLottos);
    }

    return manualGeneratedLottos;
  }

  private void insertManualLottoNumbers(Lottos manualGeneratedLottos) {
    try {  
      manualGenerateLotto.render();
      String lottoNumberString = manualGenerateLotto.getValue();
      
      manualGeneratedLottos.add(Lotto.valueOf(lottoNumberString.split(",")));
    } catch (IllegalArgumentException ex) {
      invalidAlertForInvalidInputLottoNumber.render(); 
    }
  }

  private Lottos renderAutoGenerateLotto(Integer autoLottoCount) {
    Lottos autoGeneratedLottos = LottoGenerator.autoGenerate(autoLottoCount);

    List<String> printText = createLottoNumberString(autoGeneratedLottos);

    autoGeneratedLottoNumbers.setPrintText(String.join("\n", printText));
    autoGeneratedLottoNumbers.render();

    return autoGeneratedLottos;
  }

  private List<String> createLottoNumberString(Lottos autoGeneratedLottos) {
    List<String> printText = new ArrayList<>();

    for (Integer index = 0; index < autoGeneratedLottos.size(); index++) {
      String joinedNumberText = autoGeneratedLottos.get(index)
                                                  .getNumbersToString()
                                                  .stream()
                                                  .reduce((result, number) -> result += ", " + number)
                                                  .orElse("");

      printText.add(changejoinedNumberTextToPrintExpression(joinedNumberText));
    }

    return printText;
  }

  private void renderResultLottoCount(Integer manualLottoCount, Integer autoLottoCount) {
    marginLabel.render();
    resultBuyType.setPrintText(String.format("수동으로 %d장, 자동으로 %d개를 구매했습니다.", manualLottoCount, autoLottoCount));
    resultBuyType.render();
  }

  private Integer renderManulLottoCount() {
    Integer manualLottoCount = -1;

    while (manualLottoCount < 0) {
      manualGenerateCount.render();

      manualLottoCount = inputManulLottoCount();
    }

    return manualLottoCount;
  }

  private Integer inputManulLottoCount() {
    try {
      Integer manualLottoCount = Integer.valueOf(manualGenerateCount.getValue());

      invalidLottoCountIsNegative(manualLottoCount);

      return manualLottoCount;
    } catch (NumberFormatException ex) {
      invalidAlertForInvalidInputLottoCount.render();
    }

    return -1;
  }

  private void invalidLottoCountIsNegative(Integer manualLottoCount) {
    if (manualLottoCount < 0) {
      invalidAlertForInvalidInputLottoCount.render();
    }
  }

  @Override
  public void update() {
    Integer lottosPrice = UiSharedData.getLottosPrice();

    buylottoCount = lottosPrice / Lotto.PRICE;
  }

  private String changejoinedNumberTextToPrintExpression(String numbersString) {
    return "[" + numbersString + "]";
  }
}
